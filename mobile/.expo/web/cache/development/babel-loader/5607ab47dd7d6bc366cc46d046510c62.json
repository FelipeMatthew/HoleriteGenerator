{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"get\", \"request\"];\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction usePermission(methods, options) {\n  var isMounted = useRef(true);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      status = _useState2[0],\n      setStatus = _useState2[1];\n\n  var _ref = options || {},\n      _ref$get = _ref.get,\n      get = _ref$get === void 0 ? true : _ref$get,\n      _ref$request = _ref.request,\n      request = _ref$request === void 0 ? false : _ref$request,\n      permissionOptions = _objectWithoutProperties(_ref, _excluded);\n\n  var getPermission = useCallback(_asyncToGenerator(function* () {\n    var response = yield methods.getMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);\n    if (isMounted.current) setStatus(response);\n    return response;\n  }), [methods.getMethod]);\n  var requestPermission = useCallback(_asyncToGenerator(function* () {\n    var response = yield methods.requestMethod(Object.keys(permissionOptions).length > 0 ? permissionOptions : undefined);\n    if (isMounted.current) setStatus(response);\n    return response;\n  }), [methods.requestMethod]);\n  useEffect(function runMethods() {\n    if (request) requestPermission();\n    if (!request && get) getPermission();\n  }, [get, request, requestPermission, getPermission]);\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return [status, requestPermission, getPermission];\n}\n\nexport function createPermissionHook(methods) {\n  return function (options) {\n    return usePermission(methods, options);\n  };\n}","map":{"version":3,"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;;AA6BA,SAASC,aAAT,CACEC,OADF,EAEEC,OAFF,EAE0C;EAExC,IAAMC,SAAS,GAAGL,MAAM,CAAC,IAAD,CAAxB;;EACA,gBAA4BC,QAAQ,CAAoB,IAApB,CAApC;EAAA;EAAA,IAAOK,MAAP;EAAA,IAAeC,SAAf;;EACA,WAA8DH,OAAO,IAAI,EAAzE;EAAA,oBAAQI,GAAR;EAAA,IAAQA,GAAR,yBAAc,IAAd;EAAA,wBAAoBC,OAApB;EAAA,IAAoBA,OAApB,6BAA8B,KAA9B;EAAA,IAAwCC,iBAAxC;;EAEA,IAAMC,aAAa,GAAGb,WAAW,mBAAC,aAAW;IAC3C,IAAMc,QAAQ,SAAST,OAAO,CAACU,SAAR,CACrBC,MAAM,CAACC,IAAP,CAAYL,iBAAZ,EAA+BM,MAA/B,GAAwC,CAAxC,GAA6CN,iBAA7C,GAA6EO,SADxD,CAAvB;IAGA,IAAIZ,SAAS,CAACa,OAAd,EAAuBX,SAAS,CAACK,QAAD,CAAT;IACvB,OAAOA,QAAP;EACD,CANgC,GAM9B,CAACT,OAAO,CAACU,SAAT,CAN8B,CAAjC;EAQA,IAAMM,iBAAiB,GAAGrB,WAAW,mBAAC,aAAW;IAC/C,IAAMc,QAAQ,SAAST,OAAO,CAACiB,aAAR,CACrBN,MAAM,CAACC,IAAP,CAAYL,iBAAZ,EAA+BM,MAA/B,GAAwC,CAAxC,GAA6CN,iBAA7C,GAA6EO,SADxD,CAAvB;IAGA,IAAIZ,SAAS,CAACa,OAAd,EAAuBX,SAAS,CAACK,QAAD,CAAT;IACvB,OAAOA,QAAP;EACD,CANoC,GAMlC,CAACT,OAAO,CAACiB,aAAT,CANkC,CAArC;EAQArB,SAAS,CACP,SAASsB,UAAT,GAAmB;IACjB,IAAIZ,OAAJ,EAAaU,iBAAiB;IAC9B,IAAI,CAACV,OAAD,IAAYD,GAAhB,EAAqBG,aAAa;EACnC,CAJM,EAKP,CAACH,GAAD,EAAMC,OAAN,EAAeU,iBAAf,EAAkCR,aAAlC,CALO,CAAT;EASAZ,SAAS,CAAC,SAASuB,QAAT,GAAiB;IACzBjB,SAAS,CAACa,OAAV,GAAoB,IAApB;IACA,OAAO,YAAK;MACVb,SAAS,CAACa,OAAV,GAAoB,KAApB;IACD,CAFD;EAGD,CALQ,EAKN,EALM,CAAT;EAOA,OAAO,CAACZ,MAAD,EAASa,iBAAT,EAA4BR,aAA5B,CAAP;AACD;;AAMD,OAAM,SAAUY,oBAAV,CACJpB,OADI,EAC+C;EAEnD,OAAO,UAACC,OAAD;IAAA,OACLF,aAAa,CAAsBC,OAAtB,EAA+BC,OAA/B,CADR;EAAA,CAAP;AAED","names":["useCallback","useEffect","useRef","useState","usePermission","methods","options","isMounted","status","setStatus","get","request","permissionOptions","getPermission","response","getMethod","Object","keys","length","undefined","current","requestPermission","requestMethod","runMethods","didMount","createPermissionHook"],"sourceRoot":"","sources":["../src/PermissionsHook.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\ntype GetPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\n\ninterface PermissionHookMethods<Permission extends PermissionResponse, Options = never> {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod: (options?: Options) => Promise<Permission>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod: (options?: Options) => Promise<Permission>;\n}\n\ninterface PermissionHookBehavior {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n}\n\nexport type PermissionHookOptions<Options extends object> = PermissionHookBehavior & Options;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>,\n  options?: PermissionHookOptions<Options>\n): [Permission | null, RequestPermissionMethod<Permission>, GetPermissionMethod<Permission>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<Permission | null>(null);\n  const { get = true, request = false, ...permissionOptions } = options || {};\n\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, requestPermission, getPermission]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>\n) {\n  return (options?: PermissionHookOptions<Options>) =>\n    usePermission<Permission, Options>(methods, options);\n}\n"]},"metadata":{},"sourceType":"module"}
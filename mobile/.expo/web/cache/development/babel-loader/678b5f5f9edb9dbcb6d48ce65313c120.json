{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { getRecoveryPropsToSave } from \"./ErroRecoveryStore\";\nimport ExpoErrorRecovery from \"./ExpoErrorRecovery\";\n\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(function () {\n    var _ref = _asyncToGenerator(function* (error, isFatal) {\n      if (ExpoErrorRecovery.saveRecoveryProps) {\n        yield ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n      }\n\n      globalHandler(error, isFatal);\n    });\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,QAAyB,mBAAzB;AAEA,SAASC,sBAAT;AACA,OAAOC,iBAAP;;AAEA,IAAIF,QAAQ,CAACG,EAAT,KAAgB,KAApB,EAA2B;EACzB,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAX,EAAtB;EAGAD,UAAU,CAACE,gBAAX;IAAA,6BAA4B,WAAOC,KAAP,EAAcC,OAAd,EAAyB;MACnD,IAAIP,iBAAiB,CAACQ,iBAAtB,EAAyC;QACvC,MAAMR,iBAAiB,CAACQ,iBAAlB,CAAoCT,sBAAsB,EAA1D,CAAN;MACD;;MACDG,aAAa,CAACI,KAAD,EAAQC,OAAR,CAAb;IACD,CALD;;IAAA;MAAA;IAAA;EAAA;AAMD,CAVD,MAUO,IAAIT,QAAQ,CAACG,EAAT,KAAgB,KAAhB,IAAyBH,QAAQ,CAACW,cAAtC,EAAsD;EAC3DC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAK;IACpCX,iBAAiB,CAACQ,iBAAlB,CAAoCT,sBAAsB,EAA1D;EACD,CAFD;AAGD","names":["Platform","getRecoveryPropsToSave","ExpoErrorRecovery","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","error","isFatal","saveRecoveryProps","isDOMAvailable","window","addEventListener"],"sourceRoot":"","sources":["../src/ErrorRecovery.fx.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"]},"metadata":{},"sourceType":"module"}